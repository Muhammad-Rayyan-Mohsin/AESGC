import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import random
from PIL import Image
import os

def analyze_guesses(guesses_df, correct_answers):
    detailed_results = []

    for _, row in guesses_df.iterrows():
        participant_id = row["Serial ID"]
        # Process races (Race2 to Race7)
        for race_num in range(2, 8):
            actual_1st = str(correct_answers.get(f"Race{race_num}_1st", "0")).strip()
            actual_2nd = str(correct_answers.get(f"Race{race_num}_2nd", "0")).strip()
            actual_3rd = str(correct_answers.get(f"Race{race_num}_3rd", "0")).strip()

            if actual_1st == "0" and actual_2nd == "0" and actual_3rd == "0":
                continue  # Skip races with no actual results

            participant_1st = str(row.get(f"Race{race_num}_1st", "0")).strip()
            participant_2nd = str(row.get(f"Race{race_num}_2nd", "0")).strip()
            participant_3rd = str(row.get(f"Race{race_num}_3rd", "0")).strip()

            points = 0
            if participant_1st == actual_1st:
                points += 12
            if participant_2nd == actual_2nd:
                points += 6
            if participant_3rd == actual_3rd:
                points += 2

            detailed_results.append({
                "Serial ID": participant_id,
                "Race": f"Race {race_num}",
                "1st Place Guess": participant_1st,
                "1st Place Actual": actual_1st,
                "1st Place Correct": participant_1st == actual_1st,
                "2nd Place Guess": participant_2nd,
                "2nd Place Actual": actual_2nd,
                "2nd Place Correct": participant_2nd == actual_2nd,
                "3rd Place Guess": participant_3rd,
                "3rd Place Actual": actual_3rd,
                "3rd Place Correct": participant_3rd == actual_3rd,
                "Points": points
            })

        # Process Opts (OPT1 to OPT7)
        for opt_num in range(1, 8):
            actual = str(correct_answers.get(f"OPT{opt_num}", "0")).strip()
            if actual == "0":
                continue  # Skip if actual is 0
            guess = str(row.get(f"OPT{opt_num}", "0")).strip()
            is_correct = guess == actual
            points = 1 if is_correct else 0
            detailed_results.append({
                "Serial ID": participant_id,
                "Race": f"OPT{opt_num}",
                "OPT Guess": guess,
                "OPT Actual": actual,
                "OPT Correct": is_correct,
                "Points": points
            })

    return pd.DataFrame(detailed_results)

def create_pdf(filtered_df, correct_summary, top_scorers_dict, lucky_draw_winners):
    from reportlab.lib.colors import HexColor
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Define colors
    main_bg_color = HexColor("#1E1E1E")  # Dark charcoal gray
    header_footer_color = HexColor("#111111")  # Slightly darker gray for header/footer
    text_color = HexColor("#F5F5F5")  # Light grayish-white for text
    accent_color = HexColor("#FFD700")  # Gold accent for a premium feel
    box_color = HexColor("#2A2A2A")  # Slightly lighter gray for content boxes

    def add_header_footer():
        # Header
        header_height = 60
        p.setFillColor(header_footer_color)
        p.rect(0, height - header_height, width, header_height, fill=1)
        p.setFillColor(text_color)
        p.setFont("Helvetica-Bold", 26)
        title_text = "AESGC Race Predictor Pro"
        text_width = p.stringWidth(title_text, "Helvetica-Bold", 26)
        p.drawString((width - text_width) / 2, height - 45, title_text)

        # Footer
        footer_height = 30
        p.setFillColor(header_footer_color)
        p.rect(0, 0, width, footer_height, fill=1)
        p.setFillColor(text_color)
        p.setFont("Helvetica", 9)
        footer_text = "Generated by AESGC Race Predictor Pro | ¬© 2024"
        text_width_footer = p.stringWidth(footer_text, "Helvetica", 9)
        p.drawString((width - text_width_footer) / 2, 10, footer_text)

    def draw_section_header(text, y_pos):
        # Add a modern accent bar and section header text
        p.setFillColor(accent_color)
        p.rect(45, y_pos - 10, 5, 30, fill=1)  # Accent bar
        p.setFillColor(text_color)
        p.setFont("Helvetica-Bold", 16)
        p.drawString(60, y_pos, text)
        return y_pos - 40

    # First page background
    p.setFillColor(main_bg_color)
    p.rect(0, 0, width, height, fill=1)

    # Header and footer
    add_header_footer()
    y_position = height - 100

    # Top Performers Section
    if top_scorers_dict:
        y_position = draw_section_header("Top Performers", y_position)
        p.setFont("Helvetica", 11)
        for category, scorers in top_scorers_dict.items():
            # Category box with modern spacing and lighter gray fill
            p.setFillColor(box_color)
            p.roundRect(50, y_position - 5, width - 100, 25, 5, fill=1)
            p.setFillColor(text_color)  # White text
            p.setFont("Helvetica-Bold", 12)
            p.drawString(60, y_position, category)
            y_position -= 35

            # List of Participants
            p.setFont("Helvetica", 10)
            for scorer in scorers:
                p.drawString(70, y_position, f"‚Ä¢ {scorer}")
                y_position -= 20

                if y_position < 100:  # Handle page overflow
                    p.showPage()
                    p.setFillColor(main_bg_color)
                    p.rect(0, 0, width, height, fill=1)
                    add_header_footer()
                    y_position = height - 100

            y_position -= 15

    p.save()
    buffer.seek(0)
    return buffer

def create_header_with_logo():
    st.markdown("""
        <style>
        [data-testid="stImage"] {
            margin-bottom: -2rem;
        }
        [data-testid="stImage"] > img {
            border-radius: 10px;
            image-rendering: -webkit-optimize-contrast;
            image-rendering: crisp-edges;
            -ms-interpolation-mode: nearest-neighbor;
            max-width: none;
        }
        </style>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 4])
    with col1:
        try:
            base_dir = os.path.dirname(os.path.abspath(__file__))
            logo_path = os.path.join(base_dir, 'pic.png')
            image = Image.open(logo_path)

            if image.mode not in ('RGBA', 'RGB'):
                image = image.convert('RGBA')

            original_width, original_height = image.size
            target_width = 300
            aspect_ratio = original_height / original_width
            target_height = int(target_width * aspect_ratio)

            image = image.resize((target_width, target_height), Image.Resampling.LANCZOS)

            st.image(image,
                    use_column_width=False,
                    width=target_width,
                    output_format='PNG',
                    clamp=False)

        except Exception as e:
            st.error(f"Error loading logo: {str(e)}")

    with col2:
        st.title("")
        st.write("")

def add_sidebar_logo():
    st.markdown("""
        <style>
        .sidebar-logo {
            margin-top: -60px;
            margin-bottom: 20px;
            padding: 0;
            text-align: center;
        }
        </style>
    """, unsafe_allow_html=True)

    with st.sidebar:
        st.markdown('<div class="sidebar-logo">', unsafe_allow_html=True)
        try:
            image = Image.open('pic2.png')

            if image.mode not in ('RGBA', 'RGB'):
                image = image.convert('RGBA')

            target_width = 200
            aspect_ratio = image.height / image.width
            target_height = int(target_width * aspect_ratio)

            image = image.resize((target_width, target_height), Image.Resampling.LANCZOS)

            st.image(image,
                    use_column_width=True,
                    output_format='PNG')

        except Exception as e:
            st.error(f"Error loading sidebar logo: {str(e)}")
        st.markdown('</div>', unsafe_allow_html=True)

# Initialize session state for lucky draw winners as a dictionary
if 'lucky_draw_winners' not in st.session_state:
    st.session_state.lucky_draw_winners = {}

if 'all_lucky_draw_winners' not in st.session_state:
    st.session_state.all_lucky_draw_winners = set()

if 'correct_answers' not in st.session_state:
    st.session_state.correct_answers = {}

if 'guesses_file' not in st.session_state:
    st.session_state.guesses_file = None

# Streamlit app layout with custom styling
st.set_page_config(page_title="AESGC Race Predictor Pro",
                   page_icon="üèá",
                   layout="wide",
                   initial_sidebar_state="expanded")

# Enhanced Custom CSS for styling including logo
st.markdown("""
    <style>
    .race-container {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 20px;
        margin: 10px 0;
    }
    .stButton button {
        width: 100%;
    }
    .header-container {
        display: flex;
        align-items: center;
        padding: 1rem 0;
        margin-bottom: 2rem;
        background-color: white;
        border-bottom: 1px solid #e6e6e6;
    }
    img {
        backface-visibility: hidden;
        transform: translateZ(0);
        -webkit-font-smoothing: subpixel-antialiased;
    }
    </style>
""", unsafe_allow_html=True)

# Call functions to create headers and logos
create_header_with_logo()
add_sidebar_logo()

st.title("üèá AESGC Race Predictor Pro")
st.write("Upload the participant guesses file and enter the correct answers to analyze results.")

# Sidebar for file upload and race inputs
with st.sidebar:
    guesses_file = st.file_uploader("Upload Participant Guesses File", type=["csv"])

    st.header("Enter Correct Answers")
    correct_answers = st.session_state.correct_answers
    valid_race_count = 0
    MAX_POINTS_PER_RACE = 20
    MAX_TOTAL_POINTS = 0  # Will calculate based on valid races and opts

    # Color palette for race containers
    colors = ['#ffecec', '#ecffec', '#ecebff', '#fff6ec', '#f6ecff', '#ecfff6']

    # Start from Race 2
    for race_num in range(2, 8):
        # Create a unique container for each race with different styling
        with st.container():
            st.markdown(f"""
                <div style="
                    background-color: {colors[(race_num-2)%len(colors)]};
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    border: 1px solid rgba(49, 51, 63, 0.2);
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                ">
                    <h3 style="color: #333; margin-bottom: 10px; font-size: 1.1em;">Race {race_num}</h3>
                </div>
                """, unsafe_allow_html=True)

            col1, col2, col3 = st.columns(3)

            with col1:
                correct_answers[f"Race{race_num}_1st"] = st.text_input(
                    "1st",
                    value=correct_answers.get(f"Race{race_num}_1st", "0"),
                    key=f"first_{race_num}",
                    help=f"Enter horse number for 1st place in Race {race_num}"
                )

            with col2:
                correct_answers[f"Race{race_num}_2nd"] = st.text_input(
                    "2nd",
                    value=correct_answers.get(f"Race{race_num}_2nd", "0"),
                    key=f"second_{race_num}",
                    help=f"Enter horse number for 2nd place in Race {race_num}"
                )

            with col3:
                correct_answers[f"Race{race_num}_3rd"] = st.text_input(
                    "3rd",
                    value=correct_answers.get(f"Race{race_num}_3rd", "0"),
                    key=f"third_{race_num}",
                    help=f"Enter horse number for 3rd place in Race {race_num}"
                )

            if (correct_answers[f"Race{race_num}_1st"] != "0" or
                correct_answers[f"Race{race_num}_2nd"] != "0" or
                correct_answers[f"Race{race_num}_3rd"] != "0"):
                valid_race_count += 1
                MAX_TOTAL_POINTS += MAX_POINTS_PER_RACE

    # Input for Opts (OPT1 to OPT7)
    with st.container():
        st.markdown(f"""
            <div style="
                background-color: {colors[0]};
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
                border: 1px solid rgba(49, 51, 63, 0.2);
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            ">
                <h3 style="color: #333; margin-bottom: 10px; font-size: 1.1em;"><h3 style="color: #333; margin-bottom: 10px; font-size: 1.1em;">Opts</h3>
            </div>
            """, unsafe_allow_html=True)

        opt_cols = st.columns(7)
        for idx, i in enumerate(range(3, 10)):
            with opt_cols[idx]:
                correct_answers[f"OPT{i}"] = st.text_input(
                    f"OPT{i}",
                    value=correct_answers.get(f"OPT{i}", "0"),
                    key=f"opt_{i}",
                    help=f"Enter correct value for OPT{i}"
                )
                if correct_answers[f"OPT{i}"] != "0":
                    MAX_TOTAL_POINTS += 1  # Add 1 point per valid OPT

if valid_race_count == 0 and MAX_TOTAL_POINTS == 0:
    st.warning("No valid race results entered. Please input at least one non-zero value for any race or OPT.")
else:
    if guesses_file:
        st.session_state.guesses_file = guesses_file
        guesses_df = pd.read_csv(guesses_file)

        # Convert data from float to integer
        columns_to_convert = [f"Race{race_num}_{pos}" for race_num in range(2,8) for pos in ['1st', '2nd', '3rd']] + [f"OPT{i}" for i in range(1,8)]
        for col in columns_to_convert:
            if col in guesses_df.columns:
                guesses_df[col] = pd.to_numeric(guesses_df[col], errors='coerce').fillna(0).astype(int)

        detailed_results_df = analyze_guesses(guesses_df, correct_answers)

        # Filter detailed_results_df to only include races and opts where correct answers are provided
        valid_races = [f"Race {i}" for i in range(2, 8) if (  # Start from Race 2
            correct_answers.get(f"Race{i}_1st", "0") != "0" or
            correct_answers.get(f"Race{i}_2nd", "0") != "0" or
            correct_answers.get(f"Race{i}_3rd", "0") != "0")]
        valid_opts = [f"OPT{i}" for i in range(1, 8) if correct_answers.get(f"OPT{i}", "0") != "0"]
        valid_events = valid_races + valid_opts
        filtered_df = detailed_results_df[detailed_results_df['Race'].isin(valid_events)]

        with st.container():
            st.subheader("Detailed Results")
            # Display only Serial ID and Points columns
            simplified_df = filtered_df[['Serial ID', 'Points']]
            st.dataframe(simplified_df)

            st.divider()

        # Summarize Performance
        correct_summary = (
            filtered_df
            .groupby("Serial ID")["Points"]
            .sum()
            .reset_index()
        )

        # Initialize top_scorers_dict
        top_scorers_dict = {}

        # Process Races 4, 5, 6, 7 individually
        for race_num in [4, 5, 6, 7]:
            race_name = f"Race {race_num}"
            race_df = filtered_df[filtered_df['Race'] == race_name]
            if not race_df.empty:
                race_points = race_df.groupby('Serial ID')['Points'].sum().reset_index()
                # Exclude zero points
                race_points = race_points[race_points['Points'] > 11]
                if not race_points.empty:
                    top_points = race_points['Points'].unique()
                    top_points.sort()
                    top_points = top_points[::-1][:7]  # Get top 7 point totals excluding zeros
                    for points in top_points:
                        category_name = f"{race_name} - {points} Points"
                        participants = race_points[race_points['Points'] == points]['Serial ID'].tolist()
                        if participants:
                            top_scorers_dict.setdefault(category_name, []).extend(participants)

        # Process Races 2 & 3 combined
        races_2_3_df = filtered_df[filtered_df['Race'].isin(['Race 2', 'Race 3'])]
        if not races_2_3_df.empty:
            races_2_3_points = races_2_3_df.groupby('Serial ID')['Points'].sum().reset_index()
            if any(races_2_3_points['Points'] == 40):
                winner = races_2_3_points[races_2_3_points['Points'] == 40]['Serial ID'].tolist()
                st.success(f"Winner for Races 2 & 3 with 40 points: {', '.join(map(str, winner))}")
            else:
                high_scorers = races_2_3_points[races_2_3_points['Points'] > 27]
                if high_scorers.empty:
                    st.warning("No participants scored more than 27 points in Races 2 & 3 combined.")
                    max_points = races_2_3_points['Points'].max()
                    if max_points > 0:
                        st.info(f"Highest score achieved: {max_points} points")
                else:
                    top_points = high_scorers['Points'].unique()
                    top_points.sort()
                    top_points = top_points[::-1][:7]
                    for points in top_points:
                        category_name = f"Races 2 & 3 - {points} Points"
                        participants = high_scorers[high_scorers['Points'] == points]['Serial ID'].tolist()
                        if participants:
                            top_scorers_dict.setdefault(category_name, []).extend(participants)

        # Process OPTs
        opts_df = filtered_df[filtered_df['Race'].str.startswith('OPT')]
        if not opts_df.empty:
            opts_points = opts_df.groupby('Serial ID')['Points'].sum().reset_index()
            # Exclude scores less than 3
            opts_points = opts_points[opts_points['Points'] >= 3]
            if not opts_points.empty:
                top_points = opts_points['Points'].unique()
                top_points.sort()
                top_points = top_points[::-1]  # Sort in descending order
                for points in top_points:
                    category_name = f"OPTs Total - {points} Points"
                    participants = opts_points[opts_points['Points'] == points]['Serial ID'].tolist()
                    if participants:
                        top_scorers_dict.setdefault(category_name, []).extend(participants)

        # Display Top Performers
        st.subheader("Top Performers")

        for category, participants in top_scorers_dict.items():
            st.write(f"**{category}**")
            st.write("Participants:")
            for participant in participants:
                st.write(f"- {participant}")

            # Initialize or get winners list
            winners = st.session_state.lucky_draw_winners.get(category, [])

            # Get eligible participants (exclude previous winners)
            eligible_participants = [p for p in participants if p not in winners]

            # Conduct Lucky Draw
            if st.button(f"Conduct Lucky Draw for {category}") and eligible_participants:
                winner = random.choice(eligible_participants)
                winners.append(winner)
                st.session_state.lucky_draw_winners[category] = winners
                st.success(f"Lucky Draw Winner for {category}: {winner}")
            elif not eligible_participants:
                st.warning("No eligible participants remaining for lucky draw")

            # Display all winners
            if winners:
                st.write(f"**Lucky Draw Winners for {category}:**")
                for w in winners:
                    st.write(f"- {w}")

            st.divider()

        # Analyze Specific Participant
        st.subheader("Analyze Specific Participant")
        participant_ids = filtered_df["Serial ID"].unique()
        selected_participant = st.selectbox("Select a Participant", options=participant_ids)

        participant_results = filtered_df[filtered_df["Serial ID"] == selected_participant]
        if not participant_results.empty:
            st.dataframe(participant_results)

            st.divider()

            # Gauge Chart for Total Points
            st.subheader(f"Total Points for {selected_participant}")
            total_points = participant_results["Points"].sum()
            fig_points = go.Figure(go.Indicator(
                mode="number+gauge",
                value=total_points,
                title={"text": "Total Points"},
                gauge={"axis": {"range": [0, MAX_TOTAL_POINTS]}},
            ))
            st.plotly_chart(fig_points)

        # Provide option to download detailed results as a PDF
        st.divider()
        st.subheader("Download Results")
        pdf_buffer = create_pdf(
            filtered_df,
            correct_summary,
            top_scorers_dict,
            st.session_state.lucky_draw_winners
        )
        st.download_button(
            label="Download Detailed Results as PDF",
            data=pdf_buffer,
            file_name="detailed_results.pdf",
            mime="application/pdf",
        )
